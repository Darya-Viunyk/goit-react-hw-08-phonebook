{"version":3,"file":"static/js/374.c91a53a6.chunk.js","mappings":"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","sources":["components/FormContacts/FormContacts.styled.js","components/FormContacts/FormContacts.js","components/Filter/Filter.styles.js","components/Filter/Filter.js","components/Contacts/contact.styled.js","components/Contacts/Contact.jsx","components/Contacts/contacts.styled.js","components/Contacts/Contacts.jsx","components/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\nexport const NameLabel = styled.h3`\n  color: #585757;\n  display: block;\n  margin: 5px 0;\n`;\nexport const Button = styled.button`\n  padding: 5px 15px;\n  cursor: pointer;\n  text-align: center;\n  font-size: 16px;\n  border-radius: 5px;\n  background-color: #a4a1a1;\n  color: #ffffff;\n  border: none;\n`;\nexport const Conteiner = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  background: #dedada;\n  padding: 10px 10px;\n  border-radius: 5px;\n`;\nexport const Inpyt = styled(Field)`\n  padding: 10px 10px;\n  width: auto;\n  outline: none;\n  border: 1px solid #bbb;\n  border-radius: 5px;\n  display: block;\n`;\n","import { nanoid } from 'nanoid';\nimport {\n  Label,\n  NameLabel,\n  Button,\n  Conteiner,\n  Inpyt,\n} from './FormContacts.styled';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/tasks/phoneBook.operations';\nimport { contactsSelector } from 'redux/tasks/selectors';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().min(7).max(11).required(),\n});\n\nfunction FormContacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelector);\n\n  const getIsExistContact = contact =>\n    contacts.some(it => it.name === contact.name);\n\n  const handleSudmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const contact = {\n      id: nanoid(4),\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n    if (getIsExistContact(contact)) {\n      alert(`${contact.name} is alredy in contacts`);\n      return;\n    }\n    dispatch(addContact(contact));\n    form.reset();\n  };\n\n  return (\n    <Formik initialValues={{ name: '', number: '' }} validationSchema={schema}>\n      <Conteiner onSubmit={handleSudmit}>\n        <Label>\n          <NameLabel>Name</NameLabel>\n\n          <Inpyt\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          <NameLabel>Number</NameLabel>\n          <Inpyt\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Conteiner>\n    </Formik>\n  );\n}\nexport default FormContacts;\n","import styled from '@emotion/styled';\nexport const ImpytStyle = styled.input`\n  /* margin: auto; */\n  padding: 10px 10px;\n  /* width: auto; */\n  outline: none;\n  border: 1px solid #bbb;\n  border-radius: 5px;\n  display: block;\n`;\nexport const TextSpan = styled.h5`\n  margin: 10px 10px;\n`;\nexport const FiltrBox = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n`;\n","import { ImpytStyle, TextSpan, FiltrBox } from './Filter.styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { phoneBook } from 'redux/tasks/phoneBook.slice';\nimport { contactsFilterSelector } from 'redux/tasks/selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsFilterSelector);\n\n  const onChangeValue = e => {\n    const value = e.target.value.trim().toLowerCase();\n    dispatch(phoneBook.actions.setFilter(value));\n  };\n  return (\n    <>\n      <FiltrBox>\n        <TextSpan>Find contacts by name</TextSpan>\n        <div>\n          <ImpytStyle\n            onChange={onChangeValue}\n            value={filter}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Search\"\n          />\n        </div>\n      </FiltrBox>\n    </>\n  );\n}\nexport default Filter;\n","import styled from '@emotion/styled';\nexport const Button = styled.button`\n  padding: 2px 10px;\n  cursor: pointer;\n  text-align: center;\n  font-size: 12px;\n  border-radius: 5px;\n  background-color: #a4a1a1;\n  color: #ffffff;\n  border: none;\n`;\nexport const ItemLi = styled.li`\n  display: flex;\n  gap: 7px;\n  align-items: center;\n  justify-content: space-evenly;\n`;\n","import { Button, ItemLi } from './contact.styled';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/tasks/phoneBook.operations';\n\nconst Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ItemLi key={id}>\n        <span>{name}</span>\n        <span>{number}</span>\n        <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n          Delete\n        </Button>\n      </ItemLi>\n    </>\n  );\n};\nexport default Contact;\n","import styled from '@emotion/styled';\nexport const ListStyle = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 15px 15px;\n  list-style: none;\n`;\n","import Contact from './Contact';\nimport { filtredContactsSelector } from 'redux/tasks/selectors';\nimport { ListStyle } from './contacts.styled';\nimport { useSelector } from 'react-redux';\n\nconst Contacts = () => {\n  const filteredContacts = useSelector(filtredContactsSelector);\n\n  return (\n    <>\n      <ListStyle>\n        {filteredContacts.map(({ name, id, number }) => {\n          return <Contact key={id} id={id} name={name} number={number} />;\n        })}\n      </ListStyle>\n    </>\n  );\n};\nexport default Contacts;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Outlet } from 'react-router-dom';\nimport { fetchContacts } from 'redux/tasks/phoneBook.operations';\nimport { filtredContactsSelector } from 'redux/tasks/selectors';\nimport React from 'react';\nimport FormContacts from 'components/FormContacts/FormContacts';\nimport Filter from 'components/Filter/Filter';\nimport Contacts from 'components/Contacts/Contacts';\n\nfunction ContactsPage() {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(filtredContactsSelector);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>\n        <h2>Phone Book </h2>\n        <FormContacts />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        <Filter />\n        {filteredContacts && <Contacts contacts={filteredContacts} />}\n      </div>\n      <Outlet />\n    </>\n  );\n}\nexport default ContactsPage;\n"],"names":["Label","styled","NameLabel","Button","Conteiner","Form","Inpyt","Field","schema","yup","shape","name","required","number","min","max","dispatch","useDispatch","contacts","useSelector","contactsSelector","initialValues","validationSchema","onSubmit","event","preventDefault","form","target","contact","id","nanoid","elements","value","some","it","getIsExistContact","addContact","reset","alert","type","pattern","title","ImpytStyle","TextSpan","FiltrBox","filter","contactsFilterSelector","onChange","e","trim","toLowerCase","phoneBook","placeholder","ItemLi","onClick","deleteContact","ListStyle","filteredContacts","filtredContactsSelector","map","useEffect","fetchContacts"],"sourceRoot":""}